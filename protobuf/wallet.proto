syntax = "proto3";

option go_package = "github.com/Brant-Liang/wallet-sign/protobuf/wallet";
package wallet.v1; // package 是 proto 层面的命名空间，跨语言都用。

enum ReturnCode {
  ERROR = 0;
  SUCCESS = 1;
}

message GetChainSignMethodRequest {
  string consumer_token = 1;
  string chain_name = 2;
  string network = 3;
  string asset_type = 4;
}

message GetChainSignMethodResponse {
  ReturnCode code = 1;
  string message = 2;
  string sign_method = 3;
}

message GetChainSchemaRequest {
  string consumer_token = 1;
  string chain_name = 2;
  string network = 3;
  string asset_type = 4;
}

message GetChainSchemaResponse {
  ReturnCode code = 1;
  string consumer_token = 2;
  string message = 3;
  string schema = 4; // 不同的链不同字段
}


message PublicKey {
  string compress_pubkey = 1;
  string pubkey = 2;
}

message CreateKeyPairsExportPublicKeyListRequest {
  string consumer_token = 1;
  string type = 2;
  uint64 key_num = 3;
  string chain_name = 4;
  string network = 5;
}

message CreateKeyPairsExportPublicKeyListResponse {
  ReturnCode code = 1;
  string msg = 2;
  repeated PublicKey public_key_list = 3;
}

message GetSignTransactionMessageRequest {
  string consumer_token = 1;
  string chain_name = 2;
  string network = 3;
  string public_key = 4;
  string message_hash = 5;
  uint64 key_num = 6;
}

message GetSignTransactionMessageResponse {
  ReturnCode Code = 1;
  string message = 2;
  string signature = 3;
}

message ExportPublicKeyWithAddress {
  string public_key = 1;
  string compress_public_key = 2;
  string address = 3;
}

message CreateKeyPairsWithAddressesRequest {
  string consumer_token = 1;
  string chain_name = 2;
  string network = 3;
  string address_format = 4;
  uint64 key_num  = 5;
}

message CreateKeyPairsWithAddressesResponse{
  ReturnCode code = 1;
  string message = 2;
  repeated ExportPublicKeyWithAddress public_key_addresses = 3;
}


message MessageHash {
  string public_key = 1;
  string tx_message_hash = 2;
  string sign_type = 3;
}
message MessageSignature {
  string tx_message_hash = 1;
  string signature = 2;
}

message BuildAndSignTransactionRequest {
  string consumer_token = 1;
  string chain_name = 2;
  string network = 3;
  string public_key = 4;
  string wallet_key_hash = 5;
  string risk_key_hash = 6;
  string tx_base64_body = 7;
}

message BuildAndSignTransactionResponse {
    ReturnCode code = 1;
    string message = 2;
    string tx_message_hash = 3;
    string tx_hash = 4;
    string signed_tx = 5;
}

message TransactionMessage {
  string public_key = 1;
  string wallet_key_hash = 2;
  string risk_key_hash = 3;
  string tx_base64_body = 4;
}

message TransactionWithSign {
  string tx_message_hash = 1;
  string tx_hash = 2;
  string signed_tx = 3;
}

message BuildAndSignBatchTransactionRequest {
  string consumer_token = 1;
  string chain_name = 2;
  string network = 3;
  repeated TransactionMessage tx_msg = 4;
}

message BuildAndSignBatchTransactionResponse {
  ReturnCode code = 1;
  string message = 2;
  repeated TransactionWithSign tx_with_sign = 3;
}

service WalletService {
  rpc GetChainSignMethod(GetChainSignMethodRequest) returns (GetChainSignMethodResponse) {}
  rpc GetChainSchema(GetChainSchemaRequest) returns (GetChainSchemaResponse) {}
  rpc CreateKeyPairsExportPublicKeyList(CreateKeyPairsExportPublicKeyListRequest) returns (CreateKeyPairsExportPublicKeyListResponse) {}
  rpc CreateKeyPairsWithAddresses(CreateKeyPairsWithAddressesRequest) returns (CreateKeyPairsWithAddressesResponse) {}
  // --根据 32 字节的 hash 进行签名的过程--
  rpc SignTransactionMessage(GetSignTransactionMessageRequest) returns (GetSignTransactionMessageResponse) {}
  //-- 完整签名的流程--
  rpc BuildAndSignTransaction(BuildAndSignTransactionRequest) returns (BuildAndSignTransactionResponse);
  rpc BuildAndSignBatchTransaction(BuildAndSignBatchTransactionRequest) returns (BuildAndSignBatchTransactionResponse);
}